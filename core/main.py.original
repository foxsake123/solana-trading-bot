# main.py - Updated to work with the new TradingBot implementation and properly handle real trading mode

import os
import sys
import json
import asyncio
import logging
from datetime import datetime

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('root')

# Increase Python recursion limit for complex operations
sys.setrecursionlimit(3000)
logger.info(f"Python recursion limit set to {sys.getrecursionlimit()}")

# Import configuration
from config import BotConfiguration

# Check wallet status
wallet_initialized = False
try:
    from solders_adapter import (
        create_keypair_from_secret, 
        get_balance, 
        get_sol_price,
        Keypair,
        PublicKey
    )
    
    wallet_private_key = os.getenv('WALLET_PRIVATE_KEY')
    rpc_endpoint = os.getenv('SOLANA_RPC_ENDPOINT', 'https://api.mainnet-beta.solana.com')
    
    if wallet_private_key:
        try:
            # Attempt to initialize wallet
            keypair = create_keypair_from_secret(wallet_private_key)
            pubkey = keypair.pubkey()
            wallet_initialized = True
            logger.info(f"Wallet initialized for real trading: {pubkey}")
            
            # Get balance
            balance = get_balance(pubkey, rpc_endpoint)
            price = get_sol_price()
            logger.info(f"Wallet balance: {balance:.4f} SOL (${balance * price:.2f})")
        except Exception as e:
            logger.error(f"Error initializing wallet in main.py: {e}")
            import traceback
            logger.error(traceback.format_exc())
            wallet_initialized = False
    else:
        logger.warning("No wallet private key found in environment variables")
        wallet_initialized = False
except ImportError as e:
    logger.error(f"Error importing Solders adapter: {e}")
    wallet_initialized = False

# Import components
from database import Database
from solana_trader import SolanaTrader
from token_analyzer import TokenAnalyzer
from token_scanner import TokenScanner
from birdeye import BirdeyeAPI
from trading_bot import TradingBot

async def run_bot():
    """Run the trading bot"""
    try:
        # Initialize components
        db = Database()
        
        # Load control file to check simulation mode
        control_settings = {}
        simulation_mode = False
        bot_running = True
        
        if os.path.exists(BotConfiguration.BOT_CONTROL_FILE):
            try:
                with open(BotConfiguration.BOT_CONTROL_FILE, 'r') as f:
                    control_settings = json.load(f)
                    simulation_mode = control_settings.get('simulation_mode', True)
                    bot_running = control_settings.get('running', True)
            except Exception as e:
                logger.error(f"Error loading control file: {e}")
        
        # Override simulation mode if wallet is not initialized
        if not wallet_initialized and not simulation_mode:
            logger.warning("Wallet not properly initialized, forcing simulation mode despite settings")
            simulation_mode = True
            # Update control file to reflect this
            if control_settings:
                control_settings['simulation_mode'] = True
                try:
                    with open(BotConfiguration.BOT_CONTROL_FILE, 'w') as f:
                        json.dump(control_settings, f, indent=4)
                    logger.info("Updated control file to use simulation mode")
                except Exception as e:
                    logger.error(f"Error updating control file: {e}")
        
        # Log the final decision
        logger.info(f"Bot running setting: {bot_running}")
        logger.info(f"Simulation mode setting: {simulation_mode}")
        logger.info(f"Wallet initialized: {wallet_initialized}")
        logger.info(f"Final simulation mode: {simulation_mode}")
        
        # Initialize components with simulation mode
        trader = SolanaTrader(db=db, simulation_mode=simulation_mode)
        birdeye_api = BirdeyeAPI()
        token_analyzer = TokenAnalyzer(db=db, birdeye_api=birdeye_api)
        token_scanner = TokenScanner(db=db, trader=trader, token_analyzer=token_analyzer, birdeye_api=birdeye_api)
        
        # Initialize the bot
        bot = TradingBot(
            config=BotConfiguration,
            db=db,
            token_scanner=token_scanner,
            token_analyzer=token_analyzer,
            trader=trader
        )
        
        # Start the bot only if running is enabled
        if bot_running:
            await bot.start()
        else:
            logger.info("Bot is set to not run in control file")
        
    except Exception as e:
        logger.critical(f"Unhandled bot initialization error: {e}")
        import traceback
        logger.critical(traceback.format_exc())

def main():
    """Main entry point"""
    try:
        # Run the bot with asyncio
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Unhandled error: {e}")
        import traceback
        logger.critical(traceback.format_exc())
    finally:
        logger.info("Bot execution completed")

if __name__ == "__main__":
    main()